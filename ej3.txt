//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// bs=256
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
sami@samanta:~/sami/orgaCompus1c2016$ valgrind --tool=cachegrind ./tp0 < fileTest/test256x256.txt > out.txt
==1313== Cachegrind, a cache and branch-prediction profiler
==1313== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==1313== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==1313== Command: ./tp0
==1313== 
--1313-- warning: L3 cache found, using its data for the LL simulation.
==1313== 
==1313== I   refs:      5,583,705,973
==1313== I1  misses:            1,435
==1313== LLi misses:            1,343
==1313== I1  miss rate:          0.00%
==1313== LLi miss rate:          0.00%
==1313== 
==1313== D   refs:      2,354,194,408  (2,233,392,752 rd   + 120,801,656 wr)
==1313== D1  misses:      469,464,571  (  467,380,578 rd   +   2,083,993 wr)
==1313== LLd misses:           40,868  (        2,072 rd   +      38,796 wr)
==1313== D1  miss rate:          19.9% (         20.9%     +         1.7%  )
==1313== LLd miss rate:           0.0% (          0.0%     +         0.0%  )
==1313== 
==1313== LL refs:         469,466,006  (  467,382,013 rd   +   2,083,993 wr)
==1313== LL misses:            42,211  (        3,415 rd   +      38,796 wr)
==1313== LL miss rate:            0.0% (          0.0%     +         0.0%  )



sami@samanta:~/sami/orgaCompus1c2016$ cg_annotate --auto=yes cachegrind.out.1313 
--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         3145728 B, 64 B, 12-way associative
Command:          ./tp0
Data file:        cachegrind.out.1313
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on



           Ir I1mr ILmr         Dr        D1mr DLmr        Dw    D1mw   DLmw  file:function
          7    0    0           0          0    0          6      2      0  void matrix_multiply(matrix_t* m1, matrix_t* m2, matrix_t* mr, int bs){
          .    .    .           .          .    .          .      .      .    size_t n, en, i, j, k, kk, jj;
          .    .    .           .          .    .          .      .      .    double sum;
          .    .    .           .          .    .          .      .      .    double m1e, m2e;
          3    0    0           2          1    0          1      0      0    n = m1->rows;
          9    1    1           3          0    0          1      0      0    en = bs*(n/bs);
         11    1    1           6          0    0          1      0      0    for(kk=0; kk<en; kk+=bs){
         11    1    1           6          0    0          1      0      0      for(jj=0; jj<en; jj+=bs){
      1,029    1    1         770          0    0          1      0      0        for(i=0; i<n; i++){
    461,056    1    1     263,168          0    0        256      0      0          for(j=jj; j<jj+bs; j++) {
    720,896    0    0     393,216      8,192    0     65,536      0      0            sum = mr->array[i*n+j];
118,030,336    2    2  67,371,008          0    0     65,536      0      0            for(k=kk; k<kk+bs; k++) {
184,549,376    0    0 100,663,296     80,896    0 16,777,216      0      0              m1e = m1->array[i*n+k];
184,549,376    0    0 100,663,296 16,777,216    0 16,777,216      0      0              m2e = m2->array[k*n+j];
 83,886,080    0    0  50,331,648          0    0 16,777,216      0      0              sum += m1e * m2e;
          .    .    .           .          .    .          .      .      .            }
    720,896    0    0     393,216          0    0     65,536 65,536      0          mr->array[i*n+j] = sum;
          .    .    .           .          .    .          .      .      .          }
          .    .    .           .          .    .          .      .      .        }
          .    .    .           .          .    .          .      .      .      }
          .    .    .           .          .    .          .      .      .    }
          .    .    .           .          .    .          .      .      .    
          3    0    0           3          0    0          0      0      0  }


// TODO, me parece que son todos misses de datos en L1 porque como el tama√±o de la cache no da para alocar
256 elementos double (256*8B == 2KB)....
Para el caso bs=8, se realiza una multiplicacion por bloques de 8x8 pudiendo ser cargada cada fila/columna
exactamente en una linea de



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// bs=8
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
sami@samanta:~/sami/orgaCompus1c2016$ valgrind --tool=cachegrind ./tp0 < fileTest/test256x256.txt > out.txt
==17863== Cachegrind, a cache and branch-prediction profiler
==17863== Copyright (C) 2002-2013, and GNU GPL'd, by Nicholas Nethercote et al.
==17863== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==17863== Command: ./tp0
==17863== 
--17863-- warning: L3 cache found, using its data for the LL simulation.
==17863== 
==17863== I   refs:      944,418,868
==17863== I1  misses:          1,238
==17863== LLi misses:          1,175
==17863== I1  miss rate:        0.00%
==17863== LLi miss rate:        0.00%
==17863== 
==17863== D   refs:      513,802,391  (425,607,653 rd   + 88,194,738 wr)
==17863== D1  misses:        577,134  (    535,503 rd   +     41,631 wr)
==17863== LLd misses:         27,133  (      2,047 rd   +     25,086 wr)
==17863== D1  miss rate:         0.1% (        0.1%     +        0.0%  )
==17863== LLd miss rate:         0.0% (        0.0%     +        0.0%  )
==17863== 
==17863== LL refs:           578,372  (    536,741 rd   +     41,631 wr)
==17863== LL misses:          28,308  (      3,222 rd   +     25,086 wr)
==17863== LL miss rate:          0.0% (        0.0%     +        0.0%  )


 cg_annotate --auto=yes cachegrind.out.17863 
--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         3145728 B, 64 B, 12-way associative
Command:          ./tp0
Data file:        cachegrind.out.17863
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

          Ir I1mr ILmr         Dr      D1mr DLmr       Dw    D1mw   DLmw  file:function
          7    1    1           0       0    0          6      2      0  void matrix_multiply(matrix_t* m1, matrix_t* m2, matrix_t* mr, int bs){
          .    .    .           .       .    .          .      .      .   size_t n, en, i, j, k, kk, jj;
          .    .    .           .       .    .          .      .      .   double sum;
          .    .    .           .       .    .          .      .      .   double m1e, m2e;
          3    0    0           2       1    0          1      0      0   n = m1->rows;
          9    0    0           3       0    0          1      0      0   en = bs*(n/bs);
        197    2    2         130       0    0          1      0      0   for(kk=0; kk<en; kk+=bs){
      6,304    0    0       4,160       0    0         32      0      0     for(jj=0; jj<en; jj+=bs){
  1,053,696    1    1     788,480       0    0      1,024      0      0       for(i=0; i<n; i++){
 17,039,360    0    0   9,437,184       0    0    262,144      0      0         for(j=jj; j<jj+bs; j++) {
 23,068,672    1    1  12,582,912 262,144    0  2,097,152      0      0           sum = mr->array[i*n+j];
136,314,880    1    1  75,497,472       0    0  2,097,152      0      0           for(k=kk; k<kk+bs; k++) {
184,549,376    1    1 100,663,296 262,144    0 16,777,216      0      0             m1e = m1->array[i*n+k];
184,549,376    0    0 100,663,296   8,192    0 16,777,216      0      0             m2e = m2->array[k*n+j];
 83,886,080    0    0  50,331,648       0    0 16,777,216      0      0             sum += m1e * m2e;
          .    .    .           .       .    .          .      .      .           }
 23,068,672    0    0  12,582,912       0    0  2,097,152      0      0         mr->array[i*n+j] = sum;
          .    .    .           .       .    .          .      .      .         }
          .    .    .           .       .    .          .      .      .       }
          .    .    .           .       .    .          .      .      .     }
          .    .    .           .       .    .          .      .      .   }
          .    .    .           .       .    .          .      .      .   
          3    0    0           3       0    0          0      0      0  }


b) 
bs = 256 = 256*8B = 2KB, 
bs = 8 = 8*8B = 64B

-para sum = mr->array[i*n+j]:
		bs=256: #writes = 256*256 = 65536 y #reads = 6*256*256 = 393,216 (6 reads por c/write).. analizar
En este caso hace un write por cada elemento de la matriz resultado, ya que (2KB / 8) = 256 elementos
		bs=8: #writes = 2,097,152 y #reads = 75,497,472 (36 reads por c/write).. analizar
Hace 32 writes (2097152/65536) por cada elemento de la matriz resultado, ya que (64B * 32)/8 = 256 elementos 

-para m1e = m1->array[i*n+k]:
		bs=256: #writes = 16,777,216 y #reads = 100,663,296 (6 reads por c/write).. analizar
Hace 256 writes por cada elemento ()
		bs=8: #writes = 16,777,216 y #reads = 100,663,296 (6 reads por c/write).. analizar
Hace 256 writes por cada elemento ()

-para m2e = m2->array[k*n+j]:
		bs=256: #writes = 16,777,216 y #reads = 100,663,296 (6 reads por c/write).. analizar
Hace 256 writes por cada elemento ()
		bs=8: #writes = 16,777,216 y #reads = 100,663,296 (6 reads por c/write).. analizar
Hace 256 writes por cada elemento ()

-para mr->array[i*n+j] = sum:
		bs=256: #writes = 65,536 y #reads = 6*256*256 = 393,216 (6 reads por c/write).. analizar
Hace 1 write por cada elemento,
		bs=8: #writes = 2,097,152 y #reads = 12,582,912 (6 reads por c/write).. analizar
Hace 32 writes por cada elemento,

